"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/hooks/use-toast"
import { FileText, Download, Plus, Calendar, Building, Stethoscope } from "lucide-react"

interface DocumentTemplate {
  id: string
  name: string
  description: string
  category: "banking" | "medical" | "government"
  icon: React.ReactNode
  fields: string[]
}

interface GeneratedDocument {
  id: string
  templateId: string
  templateName: string
  profileName: string
  generatedAt: string
  category: string
}

export default function DocumentsPage() {
  const { toast } = useToast()
  const [documents, setDocuments] = useState<GeneratedDocument[]>([])
  const [selectedCategory, setSelectedCategory] = useState<string>("all")

  const templates: DocumentTemplate[] = [
    {
      id: "bank-account-app",
      name: "Bank Account Application",
      description: "Standard bank account opening form",
      category: "banking",
      icon: <Building className="w-5 h-5" />,
      fields: ["Personal Info", "Address", "Employment", "Financial Info"],
    },
    {
      id: "loan-application",
      name: "Loan Application",
      description: "Personal or business loan application",
      category: "banking",
      icon: <Building className="w-5 h-5" />,
      fields: ["Personal Info", "Employment", "Financial History", "Loan Details"],
    },
    {
      id: "medical-registration",
      name: "Medical Registration",
      description: "Patient registration for healthcare providers",
      category: "medical",
      icon: <Stethoscope className="w-5 h-5" />,
      fields: ["Personal Info", "Emergency Contact", "Medical History", "Insurance"],
    },
    {
      id: "insurance-claim",
      name: "Insurance Claim Form",
      description: "Health insurance claim submission",
      category: "medical",
      icon: <Stethoscope className="w-5 h-5" />,
      fields: ["Personal Info", "Policy Details", "Claim Information", "Medical Records"],
    },
    {
      id: "tax-return",
      name: "Tax Return Form",
      description: "Annual tax return filing",
      category: "government",
      icon: <FileText className="w-5 h-5" />,
      fields: ["Personal Info", "Income Details", "Deductions", "Tax Calculations"],
    },
    {
      id: "passport-application",
      name: "Passport Application",
      description: "New passport or renewal application",
      category: "government",
      icon: <FileText className="w-5 h-5" />,
      fields: ["Personal Info", "Citizenship", "Travel History", "References"],
    },
  ]

  useEffect(() => {
    // Load generated documents from localStorage
    const savedDocs = localStorage.getItem("norel-documents")
    if (savedDocs) {
      setDocuments(JSON.parse(savedDocs))
    }
  }, [])

  const filteredTemplates =
    selectedCategory === "all" ? templates : templates.filter((t) => t.category === selectedCategory)

  const generateDocument = async (template: DocumentTemplate) => {
    // Fetch profiles from API
    const res = await fetch('/api/profiles');
    if (!res.ok) {
      toast({
        title: "Error",
        description: "Failed to load profiles for document generation.",
        variant: "destructive",
      });
      return;
    }
    const profiles = await res.json();

    if (profiles.length === 0) {
      toast({
        title: "No Profiles Available",
        description: "Create a profile first to generate documents.",
        variant: "destructive",
      });
      return;
    }

    // Use the first profile for demo purposes
    const profile = profiles[0];

    // Create document content
    const documentContent = `
${template.name}
Generated: ${new Date().toLocaleString()}

PERSONAL INFORMATION
Name: ${profile.firstName} ${profile.lastName}
Email: ${profile.email}
Phone: ${profile.primaryPhone}
Date of Birth: ${profile.dateOfBirth}
Address: ${profile.permanentAddress}, ${profile.permanentCity}, ${profile.permanentState} ${profile.permanentZip}

${template.category === "medical"
    ? `
EMERGENCY CONTACT
Contact: ${profile.emergencyContactName || "Not provided"}
Phone: ${profile.emergencyContactNumber || "Not provided"}

MEDICAL INFORMATION
${profile.medicalHistory || "No medical information provided"}
`
    : ""}

${template.category === "banking"
    ? `
EMPLOYMENT INFORMATION
Occupation: ${profile.occupation || "Not provided"}
Employer: ${profile.employerName || "Not provided"}
`
    : ""}

---
Generated by NOREL Identity System
Document ID: ${Date.now()}
    `.trim();

    // Create and download the document
    const blob = new Blob([documentContent], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${template.id}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Save to document history
    const newDoc: GeneratedDocument = {
      id: Date.now().toString(),
      templateId: template.id,
      templateName: template.name,
      profileName: `${profile.firstName} ${profile.lastName}`,
      generatedAt: new Date().toISOString(),
      category: template.category,
    };

    const updatedDocs = [...documents, newDoc];
    setDocuments(updatedDocs);
    localStorage.setItem("norel-documents", JSON.stringify(updatedDocs));

    toast({
      title: "Document Generated",
      description: `${template.name} has been created and downloaded.`,
    });
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "banking":
        return <Building className="w-4 h-4" />
      case "medical":
        return <Stethoscope className="w-4 h-4" />
      case "government":
        return <FileText className="w-4 h-4" />
      default:
        return <FileText className="w-4 h-4" />
    }
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "banking":
        return "bg-blue-500/10 text-blue-700 dark:text-blue-300"
      case "medical":
        return "bg-green-500/10 text-green-700 dark:text-green-300"
      case "government":
        return "bg-purple-500/10 text-purple-700 dark:text-purple-300"
      default:
        return "bg-gray-500/10 text-gray-700 dark:text-gray-300"
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">Document Templates</h1>
          <p className="text-muted-foreground">Generate pre-filled documents using your profile data</p>
        </div>

        {/* Category Filter */}
        <Card className="mb-8">
          <CardContent className="pt-6">
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium">Filter by category:</label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  <SelectItem value="banking">Banking</SelectItem>
                  <SelectItem value="medical">Medical</SelectItem>
                  <SelectItem value="government">Government</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Templates */}
          <div className="lg:col-span-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {filteredTemplates.map((template) => (
                <Card key={template.id} className="hover:shadow-md transition-shadow">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div
                          className={`w-10 h-10 rounded-lg flex items-center justify-center ${getCategoryColor(template.category)}`}
                        >
                          {template.icon}
                        </div>
                        <div>
                          <CardTitle className="text-lg">{template.name}</CardTitle>
                          <CardDescription>{template.description}</CardDescription>
                        </div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Badge variant="secondary" className="mb-3">
                        {getCategoryIcon(template.category)}
                        <span className="ml-1 capitalize">{template.category}</span>
                      </Badge>

                      <div className="space-y-2">
                        <p className="text-sm font-medium">Required Fields:</p>
                        <div className="flex flex-wrap gap-1">
                          {template.fields.map((field, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {field}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>

                    <Button onClick={() => generateDocument(template)} className="w-full">
                      <Plus className="w-4 h-4 mr-2" />
                      Generate Document
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Recent Documents */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Recent Documents</CardTitle>
                <CardDescription>Your generated document history</CardDescription>
              </CardHeader>
              <CardContent>
                {documents.length > 0 ? (
                  <div className="space-y-4">
                    {documents
                      .slice(-5)
                      .reverse()
                      .map((doc) => (
                        <div key={doc.id} className="p-3 border rounded-lg space-y-2">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium text-sm">{doc.templateName}</h4>
                              <p className="text-xs text-muted-foreground">Profile: {doc.profileName}</p>
                            </div>
                            <Badge variant="outline" className="text-xs">
                              {getCategoryIcon(doc.category)}
                              <span className="ml-1 capitalize">{doc.category}</span>
                            </Badge>
                          </div>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-1 text-xs text-muted-foreground">
                              <Calendar className="w-3 h-3" />
                              {new Date(doc.generatedAt).toLocaleDateString()}
                            </div>
                            <Button variant="ghost" size="sm" className="h-6 px-2">
                              <Download className="w-3 h-3" />
                            </Button>
                          </div>
                        </div>
                      ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <FileText className="w-12 h-12 text-muted-foreground mx-auto mb-3" />
                    <p className="text-sm text-muted-foreground">No documents generated yet</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
